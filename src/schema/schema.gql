# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Account {
  brand: AccountBrand
  categories: [SelectCategory!]!
  tariffs: [Tariff!]!
}

type AccountBrand {
  about: String!
  balance: Int!
  category: SelectCategory!
  city: String!
  createdAt: String!
  email: String
  id: Int!
  logoPath: String!
  name: String!
  phone: String
  postedCount: Int!
  subscribers: [String!]!
  telegram: String
  whatsapp: String
}

type Advertising {
  alt: String
  bigImagePath: String!
  id: Int!
  resolution: String
  smallImagePath: String
  type: AdvertisingType!
  url: String
}

enum AdvertisingType {
  BANNER
  CARD
  CATALOG
  LARGE
  SMALL
}

type AllAdvertisements {
  advertisements: [Advertising!]!
  count: Int!
}

type AllAnnouncements {
  announcements: [AnnouncementCard!]!
  count: Int!
}

type AllBrands {
  brands: [BrandCard!]!
  count: Int!
}

type AllCategories {
  categories: [CategoryCard!]!
  count: Int!
}

type AllProducts {
  count: Int!
  products: [ProductCard!]!
}

type AllReviews {
  count: Int!
  reviews: [ReviewCard!]!
}

type AnnouncementCard {
  about: String!
  city: String!
  createdAt: String!
  id: Int!
  maxPrice: Int!
  minPrice: Int!
  name: String!
  orders: [NestedOrder!]!
  posterPath: String!
  sku: String!
  views: Int!
}

type Brand {
  about: String!
  city: String!
  createdAt: String!
  id: Int!
  isBrandOwner: Boolean!
  isSubscribed: Boolean!
  logoPath: String!
  name: String!
  phone: String
  postedCount: Int!
  rating: String!
  reviews: [ReviewCard!]!
  reviewsCount: Int!
  telegram: String
  whatsapp: String
}

type BrandCard {
  about: String!
  category: NestedCategory!
  city: String!
  id: Int!
  logoPath: String!
  name: String!
  rating: String!
  reviewsCount: Int!
  slug: String!
}

input BrandQueryInput {
  page: Int
  perPage: Int
  rating: Sort
  reviewsCount: Sort
  searchTerm: String
  sort: Sort!
}

type CategoryCard {
  bigImagePath: String!
  name: String!
  slug: String!
  smallImagePath: String!
}

input CategoryQueryInput {
  page: Int
  perPage: Int
  popular: Boolean
  searchTerm: String
  sort: Sort!
}

input CreateBrandInput {
  about: String!
  city: String!
  logoPath: String!
  name: String!
  slug: String!
}

input CreateProductInput {
  about: String!
  minQuantity: Float!
  name: String!
  price: Float!
}

input FullestQueryInput {
  page: Int
  perPage: Int
  searchTerm: String
  sort: Sort!
}

input JwtAuthConfirmationInput {
  confirmPassword: String!
  email: String!
  login: String!
  password: String!
  phone: String!
}

input JwtAuthLoginInput {
  login: String!
  password: String!
}

input JwtAuthResetInput {
  newPassword: String!
  token: String!
}

input JwtAuthVerificationInput {
  email: String!
}

type Mutation {
  balanceTopUp(data: YookassaInput!): YookassaPayment!
  createBrand(input: CreateBrandInput!): BrandCard!
  createProduct(input: CreateProductInput!): Boolean!
  deleteProduct(id: Int!): Boolean!
  jwtConfirmation(data: JwtAuthConfirmationInput!): Boolean!
  jwtLogin(data: JwtAuthLoginInput!): SessionUserResponse!
  jwtReset(data: JwtAuthResetInput!): Boolean!
  jwtVerification(data: JwtAuthVerificationInput!): Boolean!
  logout: Boolean!
  placeOrder(data: OrderInput!): NestedOrder!
  telegramAuth(data: TelegramAuthInput!): SessionUserResponse!
  updateBrand(id: Float!, input: UpdateBrandInput!): Brand!
  updateProduct(data: UpdateProductInput!, id: Int!): Product!
  updateUserProfile(input: UpdateUserInput!): Boolean!
}

type NestedBrand {
  city: String!
  logoPath: String!
  name: String!
  slug: String!
}

type NestedCategory {
  name: String!
  slug: String!
}

type NestedOrder {
  expirationDate: String
  isLittleLeft: Boolean
  tariff: NestedTariff!
}

type NestedProductBrand {
  city: String!
  id: Int!
  isBrandOwner: Boolean!
  isSubscribed: Boolean!
  logoPath: String!
  name: String!
  phone: String
  rating: String!
  slug: String!
  telegram: String
  whatsapp: String
}

type NestedTariff {
  type: TariffType!
}

input OrderInput {
  productId: Int!
  tariffType: TariffType!
}

type Price {
  minQuantity: String!
  price: String!
}

type Product {
  about: String!
  category: NestedCategory!
  city: String
  createdAt: String!
  id: Int!
  imagesPaths: [String!]!
  name: String!
  posterPath: String!
  prices: [Price!]!
  provider: NestedProductBrand!
  rating: String!
  reviews: [ReviewCard!]!
  reviewsCount: Int!
  sku: String!
  videoPath: String
  views: Int!
}

type ProductCard {
  category: NestedCategory!
  city: String!
  id: Int!
  maxPrice: Int!
  minPrice: Int!
  name: String!
  posterPath: String!
  provider: NestedBrand!
  ratesCount: Int!
  rating: Int!
}

input ProductQueryInput {
  brandCity: String
  brandId: Int
  page: Int
  perPage: Int
  searchTerm: String
  sort: Sort!
  views: Sort
}

type Profile {
  email: String
  login: String!
  password: String!
  phone: String
}

type Query {
  account: Account!
  advertisements(query: FullestQueryInput!): AllAdvertisements!
  advertisementsByTypes(types: [AdvertisingType!]!): [Advertising!]!
  announcements(query: ProductQueryInput!): AllAnnouncements!
  brand(slug: String!): Brand!
  brands(query: BrandQueryInput!): AllBrands!
  categories(query: CategoryQueryInput!): AllCategories!
  currentProduct(id: Int!): Product!
  jwtRegister(token: String!): SessionUserResponse!
  products(query: ProductQueryInput!): AllProducts!
  reviews(query: QueryInput!): AllReviews!
  selectCategories: [SelectCategory!]!
  user: SessionUser!
}

input QueryInput {
  page: Int
  perPage: Int
  searchTerm: String
  sort: Sort!
}

type ReviewCard {
  authorName: String!
  comment: String!
  createdAt: String!
  id: Int!
  rating: Int!
}

type SelectCategory {
  id: Int!
  name: String!
}

type Seo {
  description: String!
  title: String!
}

type SessionProfile {
  email: String
  login: String!
  phone: String
}

type SessionUser {
  profile: SessionProfile!
  role: UserRole!
}

type SessionUserResponse {
  user: SessionUser!
}

enum Sort {
  ASC
  DESC
  RATE
}

type Tariff {
  description: String
  duration: Int
  price: Int!
  type: TariffType!
}

enum TariffType {
  FILL
  TOP
  VIP
}

input TelegramAuthInput {
  login: String!
  password: String!
}

input UpdateBrandInput {
  about: String!
  city: String!
  name: String!
}

input UpdateProductInput {
  about: String
  minQuantity: Float!
  name: String
  price: Float!
}

input UpdateUserInput {
  email: String
  newPassword: String
  password: String
  phone: String
  telegram: String
  whatsapp: String
}

enum UserRole {
  ADMIN
  PROVIDER
}

input YookassaInput {
  amount: String!
  redirectUrl: String!
}

type YookassaPayment {
  paymentUrl: String!
}